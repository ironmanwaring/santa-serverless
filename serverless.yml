service: Users

provider:
  name: aws
  runtime: nodejs4.3
  stage: Dev
  deploymentBucket: automation-serverlessartifact-${opt:accountId, env:ACCOUNT_ID}
  environment:
    TABLE_NAME: { Ref: UsersTable }
    TABLE_PREFIX: ${opt:stage, self:provider.stage}-
    STAGE: ${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'

functions:
  GetUsers:
    handler: users/list.list
    name: ${opt:stage, self:provider.stage}-GetUsers
    events:
      - http:
          path: users
          method: get
          cors: true

  GetUsersByGroup:
    handler: users/getByGroup.get
    name: ${opt:stage, self:provider.stage}-GetUsersByGroup
    events:
      - http:
          path: groups/{groupId}/users
          method: get
          cors: true

  CreateUser:
    handler: users/post.post
    name: ${opt:stage, self:provider.stage}-CreateUser
    events:
      - http:
          path: groups/{groupId}/users
          method: post
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: '${opt:stage, self:provider.stage}-Users'
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    TableName:
      Description: Name of the users table for this stage
      Value: { Ref: UsersTable }
      Export:
        Name: '${opt:stage, self:provider.stage}-UsersTableName'

package:
  exclude:
    - node_modules/serverless/**
