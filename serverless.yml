service:
  name: santaswap-api

plugins:
  - serverless-plugin-iopipe
  - serverless-webpack
  - serverless-plugin-iam-checker
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs8.10
  stage: personal
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:UpdateItem
      Resource:
        - { Fn::GetAtt: [GroupsTable, Arn] }
        - { Fn::Join: ['', [{ Fn::GetAtt: [GroupsTable, Arn] }, '/index/*']] }
        - { Fn::GetAtt: [UsersTable, Arn] }
  environment:
    IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}
    GROUPS_TABLE: { Ref: GroupsTable }
    GROUPS_TABLE_TYPE_INDEX: TypeIndex
    USERS_TABLE: { Ref: UsersTable }
    REVISION: ${file(infrastructure/helper.js):revision}
    STAGE: ${opt:stage}

custom:
  stageProperties:
    default:
      enabled: false
      basePath: ${self:provider.stage}
    prod:
      enabled: true
      basePath: ''
  customDomain:
    basePath: ${self:custom.stageProperties.${opt:stage, self:provider.stage}.basePath, self:custom.stageProperties.default.basePath}
    domainName: api.santaswap.io
    certificateName: '*.santaswap.io'
    enabled: ${self:custom.stageProperties.${opt:stage, self:provider.stage}.enabled, self:custom.stageProperties.default.enabled}

functions:
  createAndJoinGroup:
    handler: app/group-setup/create-and-join.handler
    events:
      - http:
          method: post
          path: users/{userId}/groups
          cors: true
          request:
            parameters:
              paths:
                userId: true

  joinGroup:
    handler: app/group-setup/join.handler
    events:
      - http:
          method: post
          path: groups/{groupId}/users/{userId}
          cors: true
          request:
            parameters:
              paths:
                userId: true
                groupId: true

  updateProfile:
    handler: app/profile-mgmt/update-profile.handler
    events:
      - http:
          method: post
          path: groups/{groupId}/users/{userId}/profile
          cors: true
          request:
            parameters:
              paths:
                userId: true
                groupId: true

  excludeUser:
    handler: app/profile-mgmt/exclude-user.handler
    events:
      - http:
          method: post
          path: groups/{groupId}/users/{userId}/excludedUsers/{excludedUserId}
          cors: true
          request:
            parameters:
              paths:
                userId: true
                groupId: true
                excludedUserId: true

  getAllGroupsByUser:
    handler: app/get-groups/get-all-by-user.handler
    events:
      - http:
          method: get
          path: users/{userId}/groups
          cors: true
          request:
            parameters:
              paths:
                userId: true

  getGroupDetailsByUser:
    handler: app/get-groups/get-detailed-by-user.handler
    events:
      - http:
          method: get
          path: users/{userId}/groups/{groupId}
          cors: true
          request:
            parameters:
              paths:
                userId: true
                groupId: true

  createUser:
    handler: app/create-users/create.handler
    events:
      - http:
          method: post
          path: users
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH

    GroupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: type
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: TypeIndex
            KeySchema:
              - AttributeName: type
                KeyType: HASH
            Projection:
              ProjectionType: ALL
