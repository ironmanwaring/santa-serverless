#name of service
service: Users

#general information about the service
provider:
  name: aws
  runtime: nodejs4.3
  stage: Dev
  deploymentBucket: automation-serverlessartifact-${opt:accountId, env:ACCOUNT_ID}
  environment:
    TABLE_NAME: { Ref: UsersTable }
    TABLE_PREFIX: ${opt:stage, self:provider.stage}-
    STAGE: ${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'

#where I want to change
#each function is a lambda function
functions:
  ListUsers:
  #which file the actual code is being called
    handler: users/list.list
    #name of lamda function
    name: ${opt:stage, self:provider.stage}-Users-List
    #here are the things that can call or trigger this function
    events:
    #creates a new api endpoint, creates a string
    #go to UI file and look at src, environment
      - http:
          path: users
          method: get
          #cors = cross origin request, things outside domain can call it
          cors: true

  ListUsersByGroup:
    handler: users/getByGroup.list
    name: ${opt:stage, self:provider.stage}-Users-ListByGroup
    events:
      - http:
          path: groups/{groupId}/users
          method: get
          cors: true

  CreateUser:
    handler: users/create.post
    name: ${opt:stage, self:provider.stage}-Users-Create
    events:
      - http:
          path: groups/{groupId}/users
          method: post
          cors: true

  UpdateUser:
    handler: users/update.put
    name: ${opt:stage, self:provider.stage}-Users-Update
    events:
      - http:
          path: groups/{groupId}/users/{userId}
          method: put
          cors: true

#specify all the other things we want to create for AWS resources
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    TableName:
      Description: Name of the users table for this stage
      Value: { Ref: UsersTable }
      Export:
        Name: '${opt:stage, self:provider.stage}-UsersTableName'
    UsersEndpoint:
      Description: Invokable URL for the users serverless API for this stage
      Value:
        Fn::Join:
          - ''
          - - https://
            - Ref: ApiGatewayRestApi
            - .execute-api.us-east-1.amazonaws.com/Dev
      Export:
        Name: '${opt:stage, self:provider.stage}-UsersEndpoint'

package:
  exclude:
    - node_modules/serverless/**
